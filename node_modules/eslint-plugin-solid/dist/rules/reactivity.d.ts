import { TSESTree as T, TSESLint } from "@typescript-eslint/utils";
import { ProgramOrFunctionNode } from "../utils";
declare const _default: TSESLint.RuleModule<"noWrite" | "untrackedReactive" | "expectedFunctionGotExpression" | "badSignal" | "badUnnamedDerivedSignal" | "shouldDestructure" | "shouldAssign" | "noAsyncTrackedScope", readonly [], {
    ImportDeclaration: (node: T.ImportDeclaration) => void;
    JSXExpressionContainer(node: T.JSXExpressionContainer): void;
    JSXSpreadAttribute(node: T.JSXSpreadAttribute): void;
    CallExpression(node: T.CallExpression): void;
    NewExpression(node: T.NewExpression): void;
    VariableDeclarator(node: T.VariableDeclarator): void;
    AssignmentExpression(node: T.AssignmentExpression): void;
    TaggedTemplateExpression(node: T.TaggedTemplateExpression): void;
    "JSXElement > JSXExpressionContainer > :function"(node: T.Node): void;
    FunctionExpression: (node: ProgramOrFunctionNode) => void;
    ArrowFunctionExpression: (node: ProgramOrFunctionNode) => void;
    FunctionDeclaration: (node: ProgramOrFunctionNode) => void;
    Program: (node: ProgramOrFunctionNode) => void;
    "FunctionExpression:exit": (currentScopeNode: ProgramOrFunctionNode) => void;
    "ArrowFunctionExpression:exit": (currentScopeNode: ProgramOrFunctionNode) => void;
    "FunctionDeclaration:exit": (currentScopeNode: ProgramOrFunctionNode) => void;
    "Program:exit": (currentScopeNode: ProgramOrFunctionNode) => void;
    JSXElement(): void;
    JSXFragment(): void;
}>;
export default _default;
