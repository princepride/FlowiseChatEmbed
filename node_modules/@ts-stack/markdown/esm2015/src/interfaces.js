/**
 * @license
 *
 * Copyright (c) 2018-2021, Костя Третяк. (MIT Licensed)
 * https://github.com/ts-stack/markdown
 */
import { escape, unescape } from './helpers';
export var TokenType;
(function (TokenType) {
    TokenType[TokenType["space"] = 1] = "space";
    TokenType[TokenType["text"] = 2] = "text";
    TokenType[TokenType["paragraph"] = 3] = "paragraph";
    TokenType[TokenType["heading"] = 4] = "heading";
    TokenType[TokenType["listStart"] = 5] = "listStart";
    TokenType[TokenType["listEnd"] = 6] = "listEnd";
    TokenType[TokenType["looseItemStart"] = 7] = "looseItemStart";
    TokenType[TokenType["looseItemEnd"] = 8] = "looseItemEnd";
    TokenType[TokenType["listItemStart"] = 9] = "listItemStart";
    TokenType[TokenType["listItemEnd"] = 10] = "listItemEnd";
    TokenType[TokenType["blockquoteStart"] = 11] = "blockquoteStart";
    TokenType[TokenType["blockquoteEnd"] = 12] = "blockquoteEnd";
    TokenType[TokenType["code"] = 13] = "code";
    TokenType[TokenType["table"] = 14] = "table";
    TokenType[TokenType["html"] = 15] = "html";
    TokenType[TokenType["hr"] = 16] = "hr";
})(TokenType || (TokenType = {}));
export class MarkedOptions {
    constructor() {
        this.gfm = true;
        this.tables = true;
        this.breaks = false;
        this.pedantic = false;
        this.sanitize = false;
        this.mangle = true;
        this.smartLists = false;
        this.silent = false;
        this.langPrefix = 'lang-';
        this.smartypants = false;
        this.headerPrefix = '';
        /**
         * Self-close the tags for void elements (&lt;br/&gt;, &lt;img/&gt;, etc.)
         * with a "/" as required by XHTML.
         */
        this.xhtml = false;
        /**
         * The function that will be using to escape HTML entities.
         * By default using inner helper.
         */
        this.escape = escape;
        /**
         * The function that will be using to unescape HTML entities.
         * By default using inner helper.
         */
        this.unescape = unescape;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL21hcmtkb3duL3NyYy9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxXQUFXLENBQUM7QUE0QzdDLE1BQU0sQ0FBTixJQUFZLFNBaUJYO0FBakJELFdBQVksU0FBUztJQUNuQiwyQ0FBUyxDQUFBO0lBQ1QseUNBQUksQ0FBQTtJQUNKLG1EQUFTLENBQUE7SUFDVCwrQ0FBTyxDQUFBO0lBQ1AsbURBQVMsQ0FBQTtJQUNULCtDQUFPLENBQUE7SUFDUCw2REFBYyxDQUFBO0lBQ2QseURBQVksQ0FBQTtJQUNaLDJEQUFhLENBQUE7SUFDYix3REFBVyxDQUFBO0lBQ1gsZ0VBQWUsQ0FBQTtJQUNmLDREQUFhLENBQUE7SUFDYiwwQ0FBSSxDQUFBO0lBQ0osNENBQUssQ0FBQTtJQUNMLDBDQUFJLENBQUE7SUFDSixzQ0FBRSxDQUFBO0FBQ0osQ0FBQyxFQWpCVyxTQUFTLEtBQVQsU0FBUyxRQWlCcEI7QUFzREQsTUFBTSxPQUFPLGFBQWE7SUFBMUI7UUFDRSxRQUFHLEdBQWEsSUFBSSxDQUFDO1FBQ3JCLFdBQU0sR0FBYSxJQUFJLENBQUM7UUFDeEIsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixhQUFRLEdBQWEsS0FBSyxDQUFDO1FBQzNCLGFBQVEsR0FBYSxLQUFLLENBQUM7UUFFM0IsV0FBTSxHQUFhLElBQUksQ0FBQztRQUN4QixlQUFVLEdBQWEsS0FBSyxDQUFDO1FBQzdCLFdBQU0sR0FBYSxLQUFLLENBQUM7UUFNekIsZUFBVSxHQUFZLE9BQU8sQ0FBQztRQUM5QixnQkFBVyxHQUFhLEtBQUssQ0FBQztRQUM5QixpQkFBWSxHQUFZLEVBQUUsQ0FBQztRQUszQjs7O1dBR0c7UUFDSCxVQUFLLEdBQWEsS0FBSyxDQUFDO1FBQ3hCOzs7V0FHRztRQUNILFdBQU0sR0FBZ0QsTUFBTSxDQUFDO1FBQzdEOzs7V0FHRztRQUNILGFBQVEsR0FBOEIsUUFBUSxDQUFDO0lBY2pELENBQUM7Q0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgtMjAyMSwg0JrQvtGB0YLRjyDQotGA0LXRgtGP0LouIChNSVQgTGljZW5zZWQpXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdHMtc3RhY2svbWFya2Rvd25cbiAqL1xuXG5pbXBvcnQgeyBlc2NhcGUsIHVuZXNjYXBlIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzQmxvY2tCYXNlIHtcbiAgbmV3bGluZTogUmVnRXhwO1xuICBjb2RlOiBSZWdFeHA7XG4gIGhyOiBSZWdFeHA7XG4gIGhlYWRpbmc6IFJlZ0V4cDtcbiAgbGhlYWRpbmc6IFJlZ0V4cDtcbiAgYmxvY2txdW90ZTogUmVnRXhwO1xuICBsaXN0OiBSZWdFeHA7XG4gIGh0bWw6IFJlZ0V4cDtcbiAgZGVmOiBSZWdFeHA7XG4gIHBhcmFncmFwaDogUmVnRXhwO1xuICB0ZXh0OiBSZWdFeHA7XG4gIGJ1bGxldDogUmVnRXhwO1xuICAvKipcbiAgICogTGlzdCBpdGVtICg8bGk+KS5cbiAgICovXG4gIGl0ZW06IFJlZ0V4cDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdWxlc0Jsb2NrR2ZtIGV4dGVuZHMgUnVsZXNCbG9ja0Jhc2Uge1xuICBmZW5jZXM6IFJlZ0V4cDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdWxlc0Jsb2NrVGFibGVzIGV4dGVuZHMgUnVsZXNCbG9ja0dmbSB7XG4gIG5wdGFibGU6IFJlZ0V4cDtcbiAgdGFibGU6IFJlZ0V4cDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaW5rIHtcbiAgaHJlZjogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtzIHtcbiAgW2tleTogc3RyaW5nXTogTGluaztcbn1cblxuZXhwb3J0IGVudW0gVG9rZW5UeXBlIHtcbiAgc3BhY2UgPSAxLFxuICB0ZXh0LFxuICBwYXJhZ3JhcGgsXG4gIGhlYWRpbmcsXG4gIGxpc3RTdGFydCxcbiAgbGlzdEVuZCxcbiAgbG9vc2VJdGVtU3RhcnQsXG4gIGxvb3NlSXRlbUVuZCxcbiAgbGlzdEl0ZW1TdGFydCxcbiAgbGlzdEl0ZW1FbmQsXG4gIGJsb2NrcXVvdGVTdGFydCxcbiAgYmxvY2txdW90ZUVuZCxcbiAgY29kZSxcbiAgdGFibGUsXG4gIGh0bWwsXG4gIGhyXG59XG5cbmV4cG9ydCB0eXBlIEFsaWduID0gJ2NlbnRlcicgfCAnbGVmdCcgfCAncmlnaHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuIHtcbiAgdHlwZTogbnVtYmVyIHwgc3RyaW5nO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBsYW5nPzogc3RyaW5nO1xuICAvKipcbiAgICogTWV0YWRhdGEgb2YgZ2ZtIGNvZGUuXG4gICAqL1xuICBtZXRhPzogc3RyaW5nO1xuICBkZXB0aD86IG51bWJlcjtcbiAgaGVhZGVyPzogc3RyaW5nW107XG4gIGFsaWduPzogQWxpZ25bXTtcbiAgY2VsbHM/OiBzdHJpbmdbXVtdO1xuICBvcmRlcmVkPzogYm9vbGVhbjtcbiAgcHJlPzogYm9vbGVhbjtcbiAgZXNjYXBlZD86IGJvb2xlYW47XG4gIGV4ZWNBcnI/OiBSZWdFeHBFeGVjQXJyYXk7XG4gIC8qKlxuICAgKiBVc2VkIGZvciBkZWJ1Z2dpbmcuIElkZW50aWZpZXMgdGhlIGxpbmUgbnVtYmVyIGluIHRoZSByZXN1bHRpbmcgSFRNTCBmaWxlLlxuICAgKi9cbiAgbGluZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdWxlc0lubGluZUJhc2Uge1xuICBlc2NhcGU6IFJlZ0V4cDtcbiAgYXV0b2xpbms6IFJlZ0V4cDtcbiAgdGFnOiBSZWdFeHA7XG4gIGxpbms6IFJlZ0V4cDtcbiAgcmVmbGluazogUmVnRXhwO1xuICBub2xpbms6IFJlZ0V4cDtcbiAgc3Ryb25nOiBSZWdFeHA7XG4gIGVtOiBSZWdFeHA7XG4gIGNvZGU6IFJlZ0V4cDtcbiAgYnI6IFJlZ0V4cDtcbiAgdGV4dDogUmVnRXhwO1xuICBfaW5zaWRlOiBSZWdFeHA7XG4gIF9ocmVmOiBSZWdFeHA7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVsZXNJbmxpbmVQZWRhbnRpYyBleHRlbmRzIFJ1bGVzSW5saW5lQmFzZSB7fVxuXG4vKipcbiAqIEdGTSBJbmxpbmUgR3JhbW1hclxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzSW5saW5lR2ZtIGV4dGVuZHMgUnVsZXNJbmxpbmVCYXNlIHtcbiAgdXJsOiBSZWdFeHA7XG4gIGRlbDogUmVnRXhwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzSW5saW5lQnJlYWtzIGV4dGVuZHMgUnVsZXNJbmxpbmVHZm0ge31cblxuZXhwb3J0IGNsYXNzIE1hcmtlZE9wdGlvbnMge1xuICBnZm0/OiBib29sZWFuID0gdHJ1ZTtcbiAgdGFibGVzPzogYm9vbGVhbiA9IHRydWU7XG4gIGJyZWFrcz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcGVkYW50aWM/OiBib29sZWFuID0gZmFsc2U7XG4gIHNhbml0aXplPzogYm9vbGVhbiA9IGZhbHNlO1xuICBzYW5pdGl6ZXI/OiAodGV4dDogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIG1hbmdsZT86IGJvb2xlYW4gPSB0cnVlO1xuICBzbWFydExpc3RzPzogYm9vbGVhbiA9IGZhbHNlO1xuICBzaWxlbnQ/OiBib29sZWFuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAcGFyYW0gY29kZSBUaGUgc2VjdGlvbiBvZiBjb2RlIHRvIHBhc3MgdG8gdGhlIGhpZ2hsaWdodGVyLlxuICAgKiBAcGFyYW0gbGFuZyBUaGUgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2Ugc3BlY2lmaWVkIGluIHRoZSBjb2RlIGJsb2NrLlxuICAgKi9cbiAgaGlnaGxpZ2h0PzogKGNvZGU6IHN0cmluZywgbGFuZz86IHN0cmluZykgPT4gc3RyaW5nO1xuICBsYW5nUHJlZml4Pzogc3RyaW5nID0gJ2xhbmctJztcbiAgc21hcnR5cGFudHM/OiBib29sZWFuID0gZmFsc2U7XG4gIGhlYWRlclByZWZpeD86IHN0cmluZyA9ICcnO1xuICAvKipcbiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgZnVuY3Rpb25zIHRvIHJlbmRlciB0b2tlbnMgdG8gSFRNTC4gRGVmYXVsdDogYG5ldyBSZW5kZXJlcigpYFxuICAgKi9cbiAgcmVuZGVyZXI/OiBSZW5kZXJlcjtcbiAgLyoqXG4gICAqIFNlbGYtY2xvc2UgdGhlIHRhZ3MgZm9yIHZvaWQgZWxlbWVudHMgKCZsdDtici8mZ3Q7LCAmbHQ7aW1nLyZndDssIGV0Yy4pXG4gICAqIHdpdGggYSBcIi9cIiBhcyByZXF1aXJlZCBieSBYSFRNTC5cbiAgICovXG4gIHhodG1sPzogYm9vbGVhbiA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2luZyB0byBlc2NhcGUgSFRNTCBlbnRpdGllcy5cbiAgICogQnkgZGVmYXVsdCB1c2luZyBpbm5lciBoZWxwZXIuXG4gICAqL1xuICBlc2NhcGU/OiAoaHRtbDogc3RyaW5nLCBlbmNvZGU/OiBib29sZWFuKSA9PiBzdHJpbmcgPSBlc2NhcGU7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzaW5nIHRvIHVuZXNjYXBlIEhUTUwgZW50aXRpZXMuXG4gICAqIEJ5IGRlZmF1bHQgdXNpbmcgaW5uZXIgaGVscGVyLlxuICAgKi9cbiAgdW5lc2NhcGU/OiAoaHRtbDogc3RyaW5nKSA9PiBzdHJpbmcgPSB1bmVzY2FwZTtcbiAgLyoqXG4gICAqIElmIHNldCB0byBgdHJ1ZWAsIGFuIGlubGluZSB0ZXh0IHdpbGwgbm90IGJlIHRha2VuIGluIHBhcmFncmFwaC5cbiAgICpcbiAgICogYGBgdHNcbiAgICogLy8gaXNOb1AgPT0gZmFsc2VcbiAgICogTWFya2VkLnBhcnNlKCdzb21lIHRleHQnKTsgLy8gcmV0dXJucyAnPHA+c29tZSB0ZXh0PC9wPidcbiAgICpcbiAgICogTWFya2VkLnNldE9wdGlvbnMoe2lzTm9QOiB0cnVlfSk7XG4gICAqXG4gICAqIE1hcmtlZC5wYXJzZSgnc29tZSB0ZXh0Jyk7IC8vIHJldHVybnMgJ3NvbWUgdGV4dCdcbiAgICogYGBgXG4gICAqL1xuICBpc05vUD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGV4ZXJSZXR1cm5zIHtcbiAgdG9rZW5zOiBUb2tlbltdO1xuICBsaW5rczogTGlua3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVidWdSZXR1cm5zIGV4dGVuZHMgTGV4ZXJSZXR1cm5zIHtcbiAgcmVzdWx0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVwbGFjZW1lbnRzIHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bGVzSW5saW5lQ2FsbGJhY2sge1xuICByZWdleHA/OiBSZWdFeHA7XG4gIGNvbmRpdGlvbigpOiBSZWdFeHA7XG4gIHRva2VuaXplKGV4ZWNBcnI6IFJlZ0V4cEV4ZWNBcnJheSk6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIFNpbXBsZVJlbmRlcmVyID0gKGV4ZWNBcnI/OiBSZWdFeHBFeGVjQXJyYXkpID0+IHN0cmluZztcbiJdfQ==